<iscomment>
	Cloudinary Media Library Template:
	This document renders an instance of the component. Multiple instances can be placed on the page.
	
</iscomment>
<isscript>
	// SFRA has a logic bug where full urls are added twice, so we need to check for duplicates before adding.
    assets = require('*/cartridge/scripts/assets.js');
	// Cloudinary Core JS
	var src = 'https://unpkg.com/cloudinary-core/cloudinary-core-shrinkwrap.min.js';
    if (assets.scripts.lastIndexOf(src) < 0) {
    	assets.addJs(src);
	}
</isscript>

<isif condition="${pdict.viewmodel.type == 'video'}">
<isscript>
	var src = "https://unpkg.com/cloudinary-video-player/dist/cld-video-player.min.js"
    if (assets.scripts.lastIndexOf(src) < 0) {
    	assets.addJs(src);
	}
	var cldName = "${pdict.viewmodel.cloudName}";
	cld = cloudinary.Cloudinary.new({cloud_name: cldName});
</isscript>
</isif>


	<!-- Uncomment this to expose the raw view model for debugging: -->
	<div style="font-size: 11px; word-break: break-all;">
		${JSON.stringify(pdict.viewmodel)}<br />
	</div>
<isif condition="${pdict.viewmodel.type == 'image'}">
<div class="cloudinary-media-library-container sfdc-component-mock sfdc-component-assets-cloudinary">
<img class="ml-image" src="${pdict.viewmodel.url}" alt="cld">
</div>
<iselseif condition="${pdict.viewmodel.type == 'video'}">
  <video id="player-${pdict.viewmodel.public_id}" data-cld-public-id="${pdict.viewmodel.public_id}">
  </video>
</iselseif>
</isif>
